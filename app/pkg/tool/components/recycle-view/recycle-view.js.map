{"version":3,"file":"recycle-view.js","sources":["../src/recycle-view.ts"],"sourcesContent":["import { transformRpx } from \"./utils/transformRpx.js\";\n\nconst DEFAULT_SHOW_SCREENS = 4;\nconst RECT_SIZE = 200;\nconst systemInfo = wx.getSystemInfoSync();\nconst DEBUG = false;\n\nComponent({\n  /**\n   * 组件的属性列表\n   */\n  properties: {\n    width: {\n      type: Number,\n      value: systemInfo.windowWidth,\n      public: true,\n      observer: \"_widthChanged\",\n    },\n    height: {\n      type: Number,\n      value: systemInfo.windowHeight,\n      public: true,\n      observer: \"_heightChanged\",\n    },\n\n    debug: {\n      type: Boolean,\n      value: false,\n    },\n\n    scrollY: {\n      type: Boolean,\n      value: true,\n    },\n\n    batch: {\n      type: Boolean,\n      value: false,\n      public: true,\n      observer: \"_recycleInnerBatchDataChanged\",\n    },\n\n    batchKey: {\n      type: String,\n      value: \"batchSetRecycleData\",\n      public: true,\n    },\n\n    scrollTop: {\n      type: Number,\n      value: 0,\n      public: true,\n      observer: \"_scrollTopChanged\",\n      observeAssignments: true,\n    },\n\n    // 距顶部/左边多远时，触发 bindscrolltoupper\n    upperThreshold: {\n      type: Number,\n      value: 50,\n      public: true,\n    },\n\n    // 距底部/右边多远时，触发 bindscrolltolower\n    lowerThreshold: {\n      type: Number,\n      value: 50,\n      public: true,\n    },\n\n    scrollToIndex: {\n      type: Number,\n      public: true,\n      value: 0,\n      observer: \"_scrollToIndexChanged\",\n      observeAssignments: true,\n    },\n\n    scrollWithAnimation: {\n      type: Boolean,\n      public: true,\n      value: false,\n    },\n\n    enableBackToTop: {\n      type: Boolean,\n      public: true,\n      value: false,\n    },\n\n    // 是否节流，默认是\n    throttle: {\n      type: Boolean,\n      public: true,\n      value: true,\n    },\n\n    placeholderImage: {\n      type: String,\n      public: true,\n      value: \"\",\n    },\n\n    screen: {\n      // 默认渲染多少屏的数据\n      type: Number,\n      public: true,\n      value: DEFAULT_SHOW_SCREENS,\n    },\n  },\n\n  options: {\n    multipleSlots: true, // 在组件定义时的选项中启用多slot支持\n  },\n\n  relations: {\n    \"./recycle-item\": {\n      type: \"child\", // 关联的目标节点应为子节点\n\n      linked(target) {\n        // 检查第一个的尺寸就好了吧\n        if (!this._hasCheckSize) {\n          this._hasCheckSize = true;\n          const size = this.boundingClientRect(this._pos.beginIndex);\n          if (!size) {\n            return;\n          }\n          setTimeout(() => {\n            try {\n              target\n                .createSelectorQuery()\n                .select(\".wx-recycle-item\")\n                .boundingClientRect((rect) => {\n                  if (\n                    rect &&\n                    (rect.width !== size.width || rect.height !== size.height)\n                  ) {\n                    console.warn(\n                      \"[recycle-view] the size in <recycle-item> is not the same with param \" +\n                        `itemSize, expect {width: ${rect.width}, height: ${rect.height}} but got ` +\n                        `{width: ${size.width}, height: ${size.height}}`,\n                    );\n                  }\n                })\n                .exec();\n            } catch (e) {\n              // do nothing\n            }\n          }, 10);\n        }\n      },\n    },\n  },\n\n  /**\n   * 组件的初始数据\n   */\n  data: {\n    innerBeforeHeight: 0,\n    innerAfterHeight: 0,\n    innerScrollTop: 0,\n    innerScrollIntoView: \"\",\n    placeholderImageStr: \"\",\n    totalHeight: 0,\n    useInPage: false,\n  },\n\n  attached() {\n    if (this.data.placeholderImage) {\n      this.setData({\n        placeholderImageStr: transformRpx(this.data.placeholderImage, true),\n      });\n    }\n    this.setItemSize({\n      array: [],\n      map: {},\n      totalHeight: 0,\n    });\n  },\n  ready() {\n    this._initPosition(() => {\n      this._isReady = true; // DOM结构ready了\n      // 有一个更新的timer在了\n      if (this._updateTimerId) return;\n\n      this._scrollViewDidScroll(\n        {\n          detail: {\n            scrollLeft: this._pos.left,\n            scrollTop: this._pos.top,\n            ignoreScroll: true,\n          },\n        },\n        true,\n      );\n    });\n  },\n  detached() {\n    this.page = null;\n    // 销毁对应的RecycleContext\n    if (this.context) {\n      this.context.destroy();\n      this.context = null;\n    }\n  },\n  /**\n   * 组件的方法列表\n   */\n  methods: {\n    _log(...args) {\n      if (!DEBUG && !this.data.debug) return;\n      const h = new Date();\n      const str = `${h.getHours()}:${h.getMinutes()}:${h.getSeconds()}.${h.getMilliseconds()}`;\n      Array.prototype.splice.call(args, 0, 0, str);\n      // eslint-disable-next-line no-console\n      console.log(...args);\n    },\n    _scrollToUpper(e) {\n      this.triggerEvent(\"scrolltoupper\", e.detail);\n    },\n    _scrollToLower(e) {\n      this.triggerEvent(\"scrolltolower\", e.detail);\n    },\n    _beginToScroll() {\n      if (!this._lastScrollTop) {\n        this._lastScrollTop = this._pos && (this._pos.top || 0);\n      }\n    },\n    _clearList(cb) {\n      this.currentScrollTop = 0;\n      this._lastScrollTop = 0;\n      const pos = this._pos;\n      pos.beginIndex = this._pos.endIndex = -1;\n      pos.afterHeight = pos.minTop = pos.maxTop = 0;\n      this.page._recycleViewportChange(\n        {\n          detail: {\n            data: pos,\n            id: this.id,\n          },\n        },\n        cb,\n      );\n    },\n    // 判断RecycleContext是否Ready\n    _isValid() {\n      return this.page && this.context && this.context.isDataReady;\n    },\n    // eslint-disable-next-line no-complexity\n    _scrollViewDidScroll(e, force) {\n      // 如果RecycleContext还没有初始化, 不做任何事情\n      if (!this._isValid()) {\n        return;\n      }\n      // 监测白屏时间\n      if (!e.detail.ignoreScroll) {\n        this.triggerEvent(\"scroll\", e.detail);\n      }\n      this.currentScrollTop = e.detail.scrollTop;\n      // 高度为0的情况, 不做任何渲染逻辑\n      if (!this._pos.height || !this.sizeArray.length) {\n        // 没有任何数据的情况下, 直接清理所有的状态\n        this._clearList(e.detail.cb);\n        return;\n      }\n\n      // 在scrollWithAnimation动画最后会触发一次scroll事件, 这次scroll事件必须要被忽略\n      if (this._isScrollingWithAnimation) {\n        this._isScrollingWithAnimation = false;\n        return;\n      }\n      const pos = this._pos;\n      const that = this;\n      const scrollLeft = e.detail.scrollLeft;\n      const scrollTop = e.detail.scrollTop;\n      const scrollDistance = Math.abs(scrollTop - this._lastScrollTop);\n      if (!force && Math.abs(scrollTop - pos.top) < pos.height * 1.5) {\n        this._log(\"【not exceed height\");\n        return;\n      }\n      this._lastScrollTop = scrollTop;\n      const SHOW_SCREENS = this.data.screen; // 固定4屏幕\n      this._log(\"SHOW_SCREENS\", SHOW_SCREENS, scrollTop);\n      this._calcViewportIndexes(\n        scrollLeft,\n        scrollTop,\n        (beginIndex, endIndex, minTop, afterHeight, maxTop) => {\n          that._log(\n            \"scrollDistance\",\n            scrollDistance,\n            \"indexes\",\n            beginIndex,\n            endIndex,\n          );\n          // 渲染的数据不变\n          if (\n            !force &&\n            pos.beginIndex === beginIndex &&\n            pos.endIndex === endIndex &&\n            pos.minTop === minTop &&\n            pos.afterHeight === afterHeight\n          ) {\n            that._log(\"------------is the same beginIndex and endIndex\");\n            return;\n          }\n          // 如果这次渲染的范围比上一次的范围小，则忽略\n          that._log(\n            \"【check】before setData, old pos is\",\n            pos.minTop,\n            pos.maxTop,\n            minTop,\n            maxTop,\n          );\n          that._throttle = false;\n          pos.left = scrollLeft;\n          pos.top = scrollTop;\n          pos.beginIndex = beginIndex;\n          pos.endIndex = endIndex;\n          // console.log('render indexes', endIndex - beginIndex + 1, endIndex, beginIndex)\n          pos.minTop = minTop;\n          pos.maxTop = maxTop;\n          pos.afterHeight = afterHeight;\n          pos.ignoreBeginIndex = pos.ignoreEndIndex = -1;\n          that.page._recycleViewportChange(\n            {\n              detail: {\n                data: that._pos,\n                id: that.id,\n              },\n            },\n            () => {\n              if (e.detail.cb) {\n                e.detail.cb();\n              }\n            },\n          );\n        },\n      );\n    },\n    // 计算在视窗内渲染的数据\n    _calcViewportIndexes(left, top, cb) {\n      const that = this;\n      // const st = +new Date\n      this._getBeforeSlotHeight(() => {\n        const { beginIndex, endIndex, minTop, afterHeight, maxTop } =\n          that.__calcViewportIndexes(left, top);\n        if (cb) {\n          cb(beginIndex, endIndex, minTop, afterHeight, maxTop);\n        }\n      });\n    },\n    _getBeforeSlotHeight(cb) {\n      if (typeof this.data.beforeSlotHeight !== \"undefined\") {\n        if (cb) {\n          cb(this.data.beforeSlotHeight);\n        }\n      } else {\n        this.reRender(cb);\n      }\n    },\n    _getAfterSlotHeight(cb) {\n      if (typeof this.data.afterSlotHeight !== \"undefined\") {\n        if (cb) {\n          cb(this.data.afterSlotHeight);\n        }\n        // cb && cb(this.data.afterSlotHeight)\n      } else {\n        this.reRender(cb);\n      }\n    },\n    _getIndexes(minTop, maxTop) {\n      if (minTop === maxTop && maxTop === 0) {\n        return {\n          beginIndex: -1,\n          endIndex: -1,\n        };\n      }\n      const startLine = Math.floor(minTop / RECT_SIZE);\n      const endLine = Math.ceil(maxTop / RECT_SIZE);\n      const rectEachLine = Math.floor(this.data.width / RECT_SIZE);\n      let beginIndex;\n      let endIndex;\n      const sizeMap = this.sizeMap;\n      for (let i = startLine; i <= endLine; i++) {\n        for (let col = 0; col < rectEachLine; col++) {\n          const key = `${i}.${col}`;\n          // 找到sizeMap里面的最小值和最大值即可\n          if (!sizeMap[key]) continue;\n          for (let j = 0; j < sizeMap[key].length; j++) {\n            if (typeof beginIndex === \"undefined\") {\n              beginIndex = endIndex = sizeMap[key][j];\n              continue;\n            }\n            if (beginIndex > sizeMap[key][j]) {\n              beginIndex = sizeMap[key][j];\n            } else if (endIndex < sizeMap[key][j]) {\n              endIndex = sizeMap[key][j];\n            }\n          }\n        }\n      }\n      return {\n        beginIndex,\n        endIndex,\n      };\n    },\n    _isIndexValid(beginIndex, endIndex) {\n      if (\n        typeof beginIndex === \"undefined\" ||\n        beginIndex === -1 ||\n        typeof endIndex === \"undefined\" ||\n        endIndex === -1 ||\n        endIndex >= this.sizeArray.length\n      ) {\n        return false;\n      }\n      return true;\n    },\n    __calcViewportIndexes(left, top) {\n      if (!this.sizeArray.length) return {};\n      const pos = this._pos;\n      if (typeof left === \"undefined\") {\n        left = pos.left;\n      }\n      if (typeof top === \"undefined\") {\n        top = pos.top;\n      }\n      // top = Math.max(top, this.data.beforeSlotHeight)\n      const beforeSlotHeight = this.data.beforeSlotHeight || 0;\n      // 和direction无关了\n      const SHOW_SCREENS = this.data.screen;\n      let minTop = top - pos.height * SHOW_SCREENS - beforeSlotHeight;\n      let maxTop = top + pos.height * SHOW_SCREENS - beforeSlotHeight;\n      // maxTop或者是minTop超出了范围\n      if (maxTop > this.totalHeight) {\n        minTop -= maxTop - this.totalHeight;\n        maxTop = this.totalHeight;\n      }\n      if (minTop < beforeSlotHeight) {\n        maxTop += Math.min(beforeSlotHeight - minTop, this.totalHeight);\n        minTop = 0;\n      }\n      // 计算落在minTop和maxTop之间的方格有哪些\n      const indexObj = this._getIndexes(minTop, maxTop);\n      const beginIndex = indexObj.beginIndex;\n      let endIndex = indexObj.endIndex;\n      if (endIndex >= this.sizeArray.length) {\n        endIndex = this.sizeArray.length - 1;\n      }\n      // 校验一下beginIndex和endIndex的有效性,\n      if (!this._isIndexValid(beginIndex, endIndex)) {\n        return {\n          beginIndex: -1,\n          endIndex: -1,\n          minTop: 0,\n          afterHeight: 0,\n          maxTop: 0,\n        };\n      }\n      // 计算白屏的默认占位的区域\n      const maxTopFull =\n        this.sizeArray[endIndex].beforeHeight + this.sizeArray[endIndex].height;\n      const minTopFull = this.sizeArray[beginIndex].beforeHeight;\n\n      // console.log('render indexes', beginIndex, endIndex)\n      const afterHeight = this.totalHeight - maxTopFull;\n      return {\n        beginIndex,\n        endIndex,\n        minTop: minTopFull, // 取整, beforeHeight的距离\n        afterHeight,\n        maxTop,\n      };\n    },\n    setItemSize(size) {\n      this.sizeArray = size.array;\n      this.sizeMap = size.map;\n      if (size.totalHeight !== this.totalHeight) {\n        // console.log('---totalHeight is', size.totalHeight);\n        this.setData({\n          totalHeight: size.totalHeight,\n          useInPage: this.useInPage || false,\n        });\n      }\n      this.totalHeight = size.totalHeight;\n    },\n    setList(key, newList) {\n      this._currentSetDataKey = key;\n      this._currentSetDataList = newList;\n    },\n    setPage(page) {\n      this.page = page;\n    },\n    forceUpdate(cb, reInit) {\n      if (!this._isReady) {\n        if (this._updateTimerId) {\n          // 合并多次的forceUpdate\n          clearTimeout(this._updateTimerId);\n        }\n        this._updateTimerId = setTimeout(() => {\n          this.forceUpdate(cb, reInit);\n        }, 10);\n        return;\n      }\n      this._updateTimerId = null;\n      const that = this;\n      if (reInit) {\n        this.reRender(() => {\n          that._scrollViewDidScroll(\n            {\n              detail: {\n                scrollLeft: that._pos.left,\n                scrollTop: that.currentScrollTop || that.data.scrollTop || 0,\n                ignoreScroll: true,\n                cb,\n              },\n            },\n            true,\n          );\n        });\n      } else {\n        this._scrollViewDidScroll(\n          {\n            detail: {\n              scrollLeft: that._pos.left,\n              scrollTop: that.currentScrollTop || that.data.scrollTop || 0,\n              ignoreScroll: true,\n              cb,\n            },\n          },\n          true,\n        );\n      }\n    },\n    _initPosition(cb) {\n      const that = this;\n      that._pos = {\n        left: that.data.scrollLeft || 0,\n        top: that.data.scrollTop || 0,\n        width: this.data.width,\n        height: Math.max(500, this.data.height), // 一个屏幕的高度\n        direction: 0,\n      };\n      this.reRender(cb);\n    },\n    _widthChanged(newVal) {\n      if (!this._isReady) return newVal;\n      this._pos.width = newVal;\n      this.forceUpdate();\n      return newVal;\n    },\n    _heightChanged(newVal) {\n      if (!this._isReady) return newVal;\n      this._pos.height = Math.max(500, newVal);\n      this.forceUpdate();\n      return newVal;\n    },\n    reRender(cb) {\n      let beforeSlotHeight;\n      let afterSlotHeight;\n      const that = this;\n      // const reRenderStart = Date.now()\n      function newCb() {\n        if (\n          that._lastBeforeSlotHeight !== beforeSlotHeight ||\n          that._lastAfterSlotHeight !== afterSlotHeight\n        ) {\n          that.setData({\n            hasBeforeSlotHeight: true,\n            hasAfterSlotHeight: true,\n            beforeSlotHeight,\n            afterSlotHeight,\n          });\n        }\n        that._lastBeforeSlotHeight = beforeSlotHeight;\n        that._lastAfterSlotHeight = afterSlotHeight;\n        // console.log('_getBeforeSlotHeight use time', Date.now() - reRenderStart)\n        if (cb) {\n          cb();\n        }\n      }\n      // 重新渲染事件发生\n      let beforeReady = false;\n      let afterReady = false;\n      // fix：#16 确保获取slot节点实际高度\n      this.setData(\n        {\n          hasBeforeSlotHeight: false,\n          hasAfterSlotHeight: false,\n        },\n        () => {\n          this.createSelectorQuery()\n            .select(\".slot-before\")\n            .boundingClientRect((rect) => {\n              beforeSlotHeight = rect.height;\n              beforeReady = true;\n              if (afterReady) {\n                if (newCb) {\n                  newCb();\n                }\n              }\n            })\n            .exec();\n          this.createSelectorQuery()\n            .select(\".slot-after\")\n            .boundingClientRect((rect) => {\n              afterSlotHeight = rect.height;\n              afterReady = true;\n              if (beforeReady) {\n                if (newCb) {\n                  newCb();\n                }\n              }\n            })\n            .exec();\n        },\n      );\n    },\n    _setInnerBeforeAndAfterHeight(obj) {\n      if (typeof obj.beforeHeight !== \"undefined\") {\n        this._tmpBeforeHeight = obj.beforeHeight;\n      }\n      if (obj.afterHeight) {\n        this._tmpAfterHeight = obj.afterHeight;\n      }\n    },\n    _recycleInnerBatchDataChanged(cb) {\n      if (typeof this._tmpBeforeHeight !== \"undefined\") {\n        const setObj = {\n          innerBeforeHeight: this._tmpBeforeHeight || 0,\n          innerAfterHeight: this._tmpAfterHeight || 0,\n        };\n        if (typeof this._tmpInnerScrollTop !== \"undefined\") {\n          setObj.innerScrollTop = this._tmpInnerScrollTop;\n        }\n        const pageObj = {};\n        let hasPageData = false;\n        if (typeof this._currentSetDataKey !== \"undefined\") {\n          pageObj[this._currentSetDataKey] = this._currentSetDataList;\n          hasPageData = true;\n        }\n        const saveScrollWithAnimation = this.data.scrollWithAnimation;\n        const groupSetData = () => {\n          // 如果有分页数据的话\n          if (hasPageData) {\n            this.page.setData(pageObj);\n          }\n          this.setData(setObj, () => {\n            this.setData({\n              scrollWithAnimation: saveScrollWithAnimation,\n            });\n            if (typeof cb === \"function\") {\n              cb();\n            }\n          });\n        };\n        groupSetData();\n        delete this._currentSetDataKey;\n        delete this._currentSetDataList;\n        this._tmpBeforeHeight = undefined;\n        this._tmpAfterHeight = undefined;\n        this._tmpInnerScrollTop = undefined;\n      }\n    },\n    _renderByScrollTop(scrollTop) {\n      // 先setData把目标位置的数据补齐\n      this._scrollViewDidScroll(\n        {\n          detail: {\n            scrollLeft: this._pos.scrollLeft,\n            scrollTop,\n            ignoreScroll: true,\n          },\n        },\n        true,\n      );\n      if (this.data.scrollWithAnimation) {\n        this._isScrollingWithAnimation = true;\n      }\n      this.setData({\n        innerScrollTop: scrollTop,\n      });\n    },\n    _scrollTopChanged(newVal, oldVal) {\n      // if (newVal === oldVal && newVal === 0) return\n      if (!this._isInitScrollTop && newVal === 0) {\n        this._isInitScrollTop = true;\n        return newVal;\n      }\n      this.currentScrollTop = newVal;\n      if (!this._isReady) {\n        if (this._scrollTopTimerId) {\n          clearTimeout(this._scrollTopTimerId);\n        }\n        this._scrollTopTimerId = setTimeout(() => {\n          this._scrollTopChanged(newVal, oldVal);\n        }, 10);\n        return newVal;\n      }\n      this._isInitScrollTop = true;\n      this._scrollTopTimerId = null;\n      // this._lastScrollTop = oldVal\n      if (typeof this._lastScrollTop === \"undefined\") {\n        this._lastScrollTop = this.data.scrollTop;\n      }\n      // 滑动距离小于一个屏幕的高度, 直接setData\n      if (Math.abs(newVal - this._lastScrollTop) < this._pos.height) {\n        this.setData({\n          innerScrollTop: newVal,\n        });\n        return newVal;\n      }\n      if (!this._isScrollTopChanged) {\n        // 首次的值需要延后一点执行才能生效\n        setTimeout(() => {\n          this._isScrollTopChanged = true;\n          this._renderByScrollTop(newVal);\n        }, 10);\n      } else {\n        this._renderByScrollTop(newVal);\n      }\n      return newVal;\n    },\n    _scrollToIndexChanged(newVal, oldVal) {\n      // if (newVal === oldVal && newVal === 0) return\n      // 首次滚动到0的不执行\n      if (!this._isInitScrollToIndex && newVal === 0) {\n        this._isInitScrollToIndex = true;\n        return newVal;\n      }\n      if (!this._isReady) {\n        if (this._scrollToIndexTimerId) {\n          clearTimeout(this._scrollToIndexTimerId);\n        }\n        this._scrollToIndexTimerId = setTimeout(() => {\n          this._scrollToIndexChanged(newVal, oldVal);\n        }, 10);\n        return newVal;\n      }\n      this._isInitScrollToIndex = true;\n      this._scrollToIndexTimerId = null;\n      if (typeof this._lastScrollTop === \"undefined\") {\n        this._lastScrollTop = this.data.scrollTop;\n      }\n      const rect = this.boundingClientRect(newVal);\n      if (!rect) return newVal;\n      // console.log('rect top', rect, this.data.beforeSlotHeight)\n      const calScrollTop = rect.top + (this.data.beforeSlotHeight || 0);\n      this.currentScrollTop = calScrollTop;\n      if (Math.abs(calScrollTop - this._lastScrollTop) < this._pos.height) {\n        this.setData({\n          innerScrollTop: calScrollTop,\n        });\n        return newVal;\n      }\n      if (!this._isScrollToIndexChanged) {\n        setTimeout(() => {\n          this._isScrollToIndexChanged = true;\n          this._renderByScrollTop(calScrollTop);\n        }, 10);\n      } else {\n        this._renderByScrollTop(calScrollTop);\n      }\n      return newVal;\n    },\n    // 提供给开发者使用的接口\n    boundingClientRect(idx) {\n      if (idx < 0 || idx >= this.sizeArray.length) {\n        return null;\n      }\n      return {\n        left: 0,\n        top: this.sizeArray[idx].beforeHeight,\n        width: this.sizeArray[idx].width,\n        height: this.sizeArray[idx].height,\n      };\n    },\n    // 获取当前出现在屏幕内数据项， 返回数据项组成的数组\n    // 参数inViewportPx表示当数据项至少有多少像素出现在屏幕内才算是出现在屏幕内，默认是1\n    getIndexesInViewport(inViewportPx) {\n      if (!inViewportPx) {\n        inViewportPx = 1;\n      }\n      const scrollTop = this.currentScrollTop;\n      let minTop = scrollTop + inViewportPx;\n      if (minTop < 0) minTop = 0;\n      let maxTop = scrollTop + this.data.height - inViewportPx;\n      if (maxTop > this.totalHeight) maxTop = this.totalHeight;\n      const indexes = [];\n      for (let i = 0; i < this.sizeArray.length; i++) {\n        if (\n          this.sizeArray[i].beforeHeight + this.sizeArray[i].height >= minTop &&\n          this.sizeArray[i].beforeHeight <= maxTop\n        ) {\n          indexes.push(i);\n        }\n        if (this.sizeArray[i].beforeHeight > maxTop) break;\n      }\n      return indexes;\n    },\n    getTotalHeight() {\n      return this.totalHeight;\n    },\n    setUseInPage(useInPage) {\n      this.useInPage = useInPage;\n    },\n    setPlaceholderImage(svgs, size) {\n      const fill = \"style='fill:rgb(204,204,204);'\";\n      const placeholderImages = [\n        `data:image/svg+xml,%3Csvg height='${size.height}' width='${size.width}' xmlns='http://www.w3.org/2000/svg'%3E`,\n      ];\n      svgs.forEach((svg) => {\n        placeholderImages.push(\n          `%3Crect width='${svg.width}' x='${svg.left}' height='${svg.height}' y='${svg.top}' ${fill} /%3E`,\n        );\n      });\n      placeholderImages.push(\"%3C/svg%3E\");\n      this.setData({\n        placeholderImageStr: placeholderImages.join(\"\"),\n      });\n    },\n  },\n});\n"],"names":["DEFAULT_SHOW_SCREENS","RECT_SIZE","systemInfo","target","size","rect","e","transformRpx","args","h","str","cb","pos","force","that","scrollLeft","scrollTop","scrollDistance","SHOW_SCREENS","beginIndex","endIndex","minTop","afterHeight","maxTop","left","top","startLine","endLine","rectEachLine","sizeMap","i","col","key","j","beforeSlotHeight","indexObj","maxTopFull","minTopFull","newList","page","reInit","newVal","afterSlotHeight","newCb","beforeReady","afterReady","obj","setObj","pageObj","hasPageData","saveScrollWithAnimation","oldVal","calScrollTop","idx","inViewportPx","indexes","useInPage","svgs","fill","placeholderImages","svg"],"mappings":"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"}